diff --git a/python/dynet.py b/python/dynet.py
index 755f537..3018139 100644
--- a/python/dynet.py
+++ b/python/dynet.py
@@ -5,15 +5,15 @@ if '--dynet-viz' in sys.argv:
 elif '--dynet-gpu' in sys.argv:  # the python gpu switch.
     sys.argv.remove('--dynet-gpu')
     def print_graphviz(**kwarge):
-        print "Run with --dynet-viz to get the visualization behavior."
+        print("Run with --dynet-viz to get the visualization behavior.")
     from _gdynet import *
 elif '--dynet-gpus' in sys.argv or '--dynet-gpu-ids' in sys.argv: # but using the c++ gpu switches suffices to trigger gpu.
     def print_graphviz(**kwarge):
-        print "Run with --dynet-viz to get the visualization behavior."
+        print("Run with --dynet-viz to get the visualization behavior.")
     from _gdynet import *
 else:
     def print_graphviz(**kwarge):
-        print "Run with --dynet-viz to get the visualization behavior."
+        print("Run with --dynet-viz to get the visualization behavior.")
     from _dynet import *
 
 __version__ = 2.0
diff --git a/python/dynet.pyx b/python/dynet.pyx
index 99e0e06..59e0a6b 100644
--- a/python/dynet.pyx
+++ b/python/dynet.pyx
@@ -4,7 +4,7 @@ import sys
 from cython.operator cimport dereference as deref
 from libc.stdlib cimport malloc, free
 import numpy as np
-import cPickle as pickle
+import pickle
 import os.path
 # TODO:
 #  - set random seed (in DYNET)
@@ -36,7 +36,7 @@ cimport dynet
 cdef init(random_seed=None):
     cdef int argc = len(sys.argv)
     cdef char** c_argv
-    args = [bytes(x) for x in sys.argv]
+    args = [bytes(x,'utf-8') for x in sys.argv]
     c_argv = <char**>malloc(sizeof(char*) * len(args)) # TODO check failure?
     for idx, s in enumerate(args):
         c_argv[idx] = s
@@ -325,8 +325,8 @@ cdef class Model: # {{{
         if not components:
             self.save_all(fname)
             return
-        fh = file(fname+".pym","w")
-        pfh = file(fname+".pyk","w")
+        fh = open(fname.decode()+".pym","w")
+        pfh = open(fname.decode()+".pyk","w")
         cdef CModelSaver *saver = new CModelSaver(fname, self.thisptr)
         for c in components:
             self._save_one(c,saver,fh,pfh)
@@ -341,7 +341,7 @@ cdef class Model: # {{{
         cdef GRUBuilder gb_
         cdef LSTMBuilder lb_
         cdef SimpleRNNBuilder sb_
-        tp = itypes.next()
+        tp = next(itypes)
         if tp == "param":
             loader.fill_parameter(p)
             param = Parameters.wrap_ptr(p)
@@ -371,18 +371,18 @@ cdef class Model: # {{{
             saveable.restore_components(items)
             return saveable
         else:
-            print "Huh?"
+            print("Huh?")
             assert False,"unsupported type " + tp
 
     cpdef load(self, string fname):
-        if not os.path.isfile(fname+".pym"):
+        if not os.path.isfile(fname.decode()+".pym"):
             self.load_all(fname)
             return
-        with file(fname+".pym","r") as fh:
+        with open(fname.decode()+".pym","r") as fh:
             types = fh.read().strip().split()
 
         cdef CModelLoader *loader = new CModelLoader(fname, self.thisptr)
-        with file(fname+".pyk","r") as pfh:
+        with open(fname.decode()+".pyk","r") as pfh:
             params = []
             itypes = iter(types)
             while True: # until iterator is done
@@ -601,9 +601,6 @@ cdef class Expression: #{{{
     def __getitem__(self, int i):
         return pick(self, i)
 
-    def __getslice__(self, int i, int j):
-        return pickrange(self, i, j)
-
     cpdef scalar_value(self, recalculate=False):
         if self.cg_version != _cg._cg_version: raise RuntimeError("Stale Expression (created before renewing the Computation Graph).")
         if recalculate: self.cg().forward(self.vindex) # TODO: make recalculate run on the entire graph, not only up to here?
diff --git a/python/dynet_viz.py b/python/dynet_viz.py
index 6f902c8..be1c919 100644
--- a/python/dynet_viz.py
+++ b/python/dynet_viz.py
@@ -969,9 +969,9 @@ def print_graphviz(compact=False, show_dims=True, expression_names=None, lookup_
     (nodes, birnn_collapse_to) = collapse_birnn_states(nodes, compact)
     collapse_to.update(birnn_collapse_to)
 
-  print 'digraph G {'
-  print '  rankdir=BT;'
-  if not compact: print '  nodesep=.05;'
+  print('digraph G {')
+  print('  rankdir=BT;')
+  if not compact: print('  nodesep=.05;')
   
   node_types = defaultdict(set)
   for n in nodes:
@@ -982,7 +982,7 @@ def print_graphviz(compact=False, show_dims=True, expression_names=None, lookup_
               '2_regular': '[shape=rect]',
               '3_rnn_state': '[shape=rect, peripheries=2]',
              }[node_type]
-    print '  node %s; ' % (style), ' '.join(node_types[node_type])
+    print('  node %s; ' % (style), ' '.join(node_types[node_type]))
   
 #   all_nodes = set(line.strip().split()[0] for line in node_def_lines)
   for n in nodes:
@@ -995,9 +995,9 @@ def print_graphviz(compact=False, show_dims=True, expression_names=None, lookup_
         label = '%s\\n%s' % (label, shape_str(n.input_dim))
     if n.output_dim.invalid() or (n.input_dim is not None and n.input_dim.invalid()):
       n.features += " [color=red,style=filled,fillcolor=red]"
-    print '  %s [label="%s"] %s;' % (n.name, label, n.features)
+    print('  %s [label="%s"] %s;' % (n.name, label, n.features))
     for c in n.children:
-      print '  %s -> %s;' % (c, n.name)
+      print('  %s -> %s;' % (c, n.name))
     
   rnn_states = [] # (name, rnn_name, state_idx)
   rnn_state_re = re.compile("[^-]+-(.)-(\\d+)")
@@ -1016,6 +1016,6 @@ def print_graphviz(compact=False, show_dims=True, expression_names=None, lookup_
         group_name_n = collapse_to.get(name_n, name_n)
         edges.add((group_name_p, group_name_n))
   for (name_p, name_n) in edges:
-    print '  %s -> %s [style=dotted];' % (name_p, name_n) # ,dir=both
+    print('  %s -> %s [style=dotted];' % (name_p, name_n)) # ,dir=both
 
-  print '}'
+  print('}')
diff --git a/python/model_test.py b/python/model_test.py
index d8e963d..58d82b6 100644
--- a/python/model_test.py
+++ b/python/model_test.py
@@ -186,7 +186,7 @@ def new_style_save_and_load():
 
 new_style_save_and_load()
 
-print "Model saving tests passed."
+print("Model saving tests passed.")
 
 
 
